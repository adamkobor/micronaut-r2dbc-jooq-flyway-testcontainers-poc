/*
 * This file is generated by jOOQ.
 */
package com.akobor.r2dbcdemo.tables.records


import com.akobor.r2dbcdemo.tables.Address
import com.akobor.r2dbcdemo.tables.pojos.AddressPojo

import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.GeneratedValue
import javax.persistence.GenerationType
import javax.persistence.Id
import javax.persistence.Index
import javax.persistence.Table
import javax.validation.constraints.NotNull
import javax.validation.constraints.Size

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
@Entity
@Table(
    name = "address",
    schema = "r2dbc-poc",
    indexes = [
        Index(name = "idx_address_account_id", columnList = "account_id ASC")
    ]
)
open class AddressRecord() : UpdatableRecordImpl<AddressRecord>(Address.ADDRESS), Record3<Long?, Long?, String?> {

    @get:Id
    @get:GeneratedValue(strategy = GenerationType.IDENTITY)
    @get:Column(name = "id", nullable = false, precision = 64)
    var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    @get:Column(name = "account_id", nullable = false, precision = 64)
    @get:NotNull
    var accountId: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    @get:Column(name = "full_address", nullable = false, length = 255)
    @get:NotNull
    @get:Size(max = 255)
    var fullAddress: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<Long?, Long?, String?> = super.fieldsRow() as Row3<Long?, Long?, String?>
    override fun valuesRow(): Row3<Long?, Long?, String?> = super.valuesRow() as Row3<Long?, Long?, String?>
    override fun field1(): Field<Long?> = Address.ADDRESS.ID
    override fun field2(): Field<Long?> = Address.ADDRESS.ACCOUNT_ID
    override fun field3(): Field<String?> = Address.ADDRESS.FULL_ADDRESS
    override fun component1(): Long? = id
    override fun component2(): Long? = accountId
    override fun component3(): String? = fullAddress
    override fun value1(): Long? = id
    override fun value2(): Long? = accountId
    override fun value3(): String? = fullAddress

    override fun value1(value: Long?): AddressRecord {
        this.id = value
        return this
    }

    override fun value2(value: Long?): AddressRecord {
        this.accountId = value
        return this
    }

    override fun value3(value: String?): AddressRecord {
        this.fullAddress = value
        return this
    }

    override fun values(value1: Long?, value2: Long?, value3: String?): AddressRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised AddressRecord
     */
    constructor(id: Long? = null, accountId: Long? = null, fullAddress: String? = null): this() {
        this.id = id
        this.accountId = accountId
        this.fullAddress = fullAddress
    }

    /**
     * Create a detached, initialised AddressRecord
     */
    constructor(value: AddressPojo?): this() {
        if (value != null) {
            this.id = value.id
            this.accountId = value.accountId
            this.fullAddress = value.fullAddress
        }
    }
}
